1) Polindrom

# мим, дед, наган, заказ, кабак, казак, мадам, шалаш -- полиндром
# кукуруза -- не полиндром

s = input("Enter a string: ")
if len(s) % 2 == 0:
  print("Не полиндром")
else:
  for i in range(1, len(s), 2):
      if s[i] != s[len(s) - i - 1]:
          print("Не полиндром")
          break
  else:
      print("Полиндром")


2) encrypted word

text = input('Введите зашифрованное сообщение: ')
count = 0
h_1 = '' # не чётные буквы
t_2 = '' # чётные буквы
for i in text:
  count += 1
  if count % 2 == 0: # Проверить на чётность, сортировка
    t_2 = i + t_2 # Чётные на лево
  else:
    h_1 = h_1 + i # Не чётные на право
print('Расшифрованное сообщение:', h_1 + t_2)

3)

# Программа которая выдаст, как нужно сесть мальчикам и девочкам,
# чтобы рядом с каждым мальчиком сидела хотя бы одна девочка,
# а рядом с каждой девочкой — хотя бы один мальчик.
#
# На вход подаются два числа - кол-во мальчиков B и кол-во девочек G.
# В ответе выведите какую-нибудь строку,
# Если рассадить мальчиков и девочек согласно условию задачи невозможно,
# выводим строку 'Нет решения'.
#
#
# Пример 1:
#
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 5
# Ответ: BGBGBGBGBG
#
# Пример 2:
#
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 3
# Ответ: BGBGBBGB
#
# Пример 3:
#
# Введите кол-во мальчиков: 100
# Введите кол-во девочек: 1
# Ответ: Нет решения

boys = int(input('Введите кол-во мальчиков '))
girls = int(input('Введите кол-во девочек '))
answer = ''
if (boys > 2* girls) or (girls > 2* boys):
  print('Нет решения')
elif boys >= girls:
  k = boys - girls
  for bgb in range(k):
    answer += 'BGB'
  for bg in range(girls - k):
    answer += 'BG'
else:
  k = girls - boys
  for gbg in range(k):
    answer += 'GBG'
  for gb in range(boys - k):
    answer += 'GB'
print(answer)

4)
# Для настольной игры используются карточки с номерами от 1 до N.
# Одна карточка потерялась.
# Найдите ее, зная номера оставшихся карточек.
# 
# Вводится число N,
# далее еще N − 1 чисел: 
# номера оставшихся карточек (различные числа от 1 до N).
# Программа должна вывести номер потерянной карточки.

a = int(input('Введите количество карточек: '))
sum = 0
for i in range(1, a + 1):
    sum += i
for i in range(a - 1):
    sum -= int(input('Введите номер оставшейся карточки:'))
print('Номер пропавшей карточки:',sum)

5) факториал числа
num = int(input('Введите число: '))
fac = 1
for i in range(2, num+1):
    fac *= i
print('Факториал числа',num,'равен',fac)

6)Реализация алгоритма бинарного поиска

# «Твое число равно, меньше или больше, чем число N?»,
# где N — число, которое хочет проверить компьютер.
# Мальчик отвечает одним из трёх чисел:
# 1 — равно,
# 2 — больше,
# 3 — меньше.

low = 1
high = 100
count = 1
while True:
    N = (low + high) // 2
    print('Загаданное число меньше или больше', N)
    answer = int(input('1 - равно, 2 - больше, 3 - меньше '))
    if answer == 1:
        print('Я угадал!')
        break
    elif answer == 2:
        low = N
    elif answer == 3:
        high = N
    count += 1
print('Игра окончена!')

7)# Напишите программу,
# в которой считается, сколько задач выполнил Максим за день (8 часов).
# Если он хоть раз взял трубку,
# то в конце дополнительно выводите сообщение: «Нужно зайти в магазин».
 
# Пример:
# Начался 8-часовой рабочий день
# 1 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 2 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 3 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 4 час
# Сколько задач решит Максим? 4
# Звонит жена. Взять трубку? (1-да, 0-нет) 1
 
# 5 час
# Сколько задач решит Максим? 5
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 6 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 7 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 1
 
# 8 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# Рабочий день закончился. Всего выполнено задач: 21
# Нужно зайти в магазин

time = 9  # время, которое осталось у Максима
task = 0 # начальное кол-во задач
summary_of_tasks = 0 # итоговое кол-во задач
wife = ''
while time > 0:  # пока у Максима есть время на работу и пока нету задач
    time -= 1  # уменьшаем время на 1
    print(time,'час')
    print("Сколько задач решит Максим? ")
    task = int(input('Введите кол-во задач: '))
    answer = int(input('Звонит жена. Взять трубку? (1-да, 0-нет) '))  
    if task > 0:
      summary_of_tasks += task
    if answer == 1:
      wife = 'Нужно зайти в магазин'
    else:
      if time == 0:
        break
    

print("Всего выполнено задач:", summary_of_tasks)  # выводим общее количество выполненных задач
print(wife)


8) rover game #игра марсоход 

#Марсоход высаживается в центре комнаты (в точке 8, 10),в прямоугольном помещении размером 15 × 20 м.
#Затем управление им передаётся оператору, то есть пользователю вашей программы. 
# Программа спрашивает, в какую сторону оператор хочет направить робота: север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D).
#Оператор делает выбор, марсоход перемещается в эту сторону на один метр, а программа сообщает новую позицию робота.


# Что нужно сделать
# Создайте программу для управления роботом Билли.

# Пример:
# 
# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:

print('w -- north/s-- south/a-- west/d-- east')
print('Марсоход высадился в центре комнаты в точке 8:10')
x = 8
y = 10
word_1, word_2, word_3, word_4 = 'w', 's', 'a', 'd'
while True:
  operator_comand = input('[Оператор]: ')
  if (x >= 15 or x <= 0) or (y >= 20 or y <= 0):
    print('[Программа]:','Вы вышли за границы!') 
    break
  elif operator_comand.lower() == word_1: # w
    y +=1
    print('[Программа]:','Марсоход находится на позиции', x, y, 'введите команду: ')
  elif operator_comand.lower() == word_2: # s
    y -=1
    print('[Программа]:','Марсоход находится на позиции', x, y, 'введите команду: ')
  elif operator_comand.lower() == word_3: # a
    x -=1
    print('[Программа]:','Марсоход находится на позиции', x, y, 'введите команду: ')
  elif operator_comand.lower() == word_4: # d
    x +=1
    print('[Программа]:','Марсоход находится на позиции', x, y, 'введите команду: ')

9)
# программа,которая получает на вход количество уровней пирамиды и выводит их на экран,

# Пример:
# 
#             1
#          3     5
#       7     9     11
#    13    15    17    19
# 21    23    25    27    29

rows = int(input('Введите кол-во ступенек '))
new_num = 1
for line in range(rows):
  space_count = rows - line - 1
  print('   ' * space_count, end = '')
  for number in range(line + 1):
    print(new_num, end = '    ')
    new_num += 2
  print()

10)
# Программу,которая получает на вход число N и выводит на экран числа в виде 'ямы':

# Введите число: 5
#
# 5........5
# 54......45
# 543....345
# 5432..2345
# 5432112345

depth = int(input('Введите глубину ямы '))
for line in range(depth):
  for left_number in range(depth, depth - line - 1, - 1):
    print(left_number, end = '')
  point_count = 2 * (depth - line - 1)
  print('.' * point_count, end = '')
  for right_number in range(depth - line, depth + 1):
    print(right_number, end = '')
  print()

11)
# Вводится N чисел. 
# Среди натуральных чисел, которые были введены,найти наибольшее по сумме цифр. 
# Вывеcти на экран это число и сумму его цифр.

n = int(input("Количество чисел в последовательности: "))
big_number, big_summ = None, 0
for _ in range(n):
    number = int(input("Введите число: "))
    while number:
      summ = 0
      for j in str(number):
        summ += int(j)
      if summ > big_summ and summ > 0:
        big_summ = summ
        big_number = number
        break
print(f'Самое большое число: {big_number} с суммой цифр: {big_summ}')

12)
#Программа, которая считает количество простых чисел в заданной последовательности и выводит ответ на экран.

primes = []
t = int(input("Количество чисел в последовательности: "))
for i in range(2, t + 1):
    flag = True
    for j in range(2, int(i ** 0.5) + 1): # проверяем до корня
        if i % j == 0:
            flag = False # Если число составное
            break
    if flag:
        primes.append(i) # иначе добавляем в список
print('Простые числа:', primes)
print('Количество простых чисел в последовательности:', len(primes))

13)
# Программа,которая рисует с помощью символьной графики прямоугольную рамку.

#  _ _ _ _ _ _ _ _ _
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |_ _ _ _ _ _ _ _ _|

x_lim = int(input('Введите ширину '))
y_lim = int(input('Введите высоту '))

for y in range(y_lim):
    for x in range(x_lim):
      if x == 0 or x == x_lim - 1:
        print('|', end=' ')
      elif y == 0 or y == y_lim -1:
        print('-', end=' ')
      else:
        print(' ', end=' ')
    print()
14)
# Программа, которая выводит такую “лесенку” из чисел:

# Введите число: 5
# 1
# 2 2
# 3 3 3
# 4 4 4 4
# 5 5 5 5 5

n = int(input('Введите число '))
for i in range(n+1):
  for j in range(i):
    if i % 2 == 0:
      print(i, end = ' ')
    else:
      print(i, end = ' ')
  print()

15) Шахматы 
# По заданным вещественным координатам коня и второй точки программа должна определить может ли конь ходить в эту точку.

# Введите местоположение коня:
# 0.071
# 0.118
# Введите местоположение точки на доске:
# 0.213
# 0.068
# Конь в клетке (0, 1). Точка в клетке (2, 0).
# Да, конь может ходить в эту точку.

while True:
  print('Введите местоположение коня')
  x_horse = float(input("По вертикали: ")) 
  y_horse = float(input("По горизонтали: ")) 
  print('Введите местоположение точки на доске')
  x_dot = float(input("По вертикали: "))
  y_dot = float(input("По горизонтали:"))
  
  x_num = int(x_horse * 10)
  y_num = int(y_horse * 10)
  x_number = int(x_dot * 10)
  y_number = int(y_dot * 10)
  break
  # if:
  #   print('Вы вышли за пределы!')
  # print('Конь находится по координатам:', x_horse,y_horse,\
  #      'точка находится на координатах:', x_dot,y_dot)
  
delta_x = abs(x_horse - x_dot)
print(delta_x)
delta_y = abs(y_horse - y_dot)
print(delta_y)
if abs(delta_x * delta_y) == 2:
    print('Конь не может сходить в эту точку', x_dot, y_dot)
else:
    print('Конь может сходить в эту точку', x_dot, y_dot)

16)Аналог Steam

# Пример:
# 
# Укажите размер файла для скачивания: 123
# Какова скорость вашего соединения? 27
# 
# Прошло 1 сек. Скачано 27 из 123 Мб (22%)
# Прошло 2 сек. Скачано 54 из 123 Мб (44%)
# Прошло 3 сек. Скачано 81 из 123 Мб (66%)
# Прошло 4 сек. Скачано 108 из 123 Мб (88%)
# Прошло 5 сек. Скачано 123 из 123 Мб (100%)

import math
file = int(input('Укажите размер файла: '))
speed = int(input('Какова скорость вашего соединения? '))
second = 1 # one second
for i  in range(speed, file, speed):
  z = math.ceil(100*i/file)
  z_1 = math.ceil(100*file/file)
  print('Прошло', second, 'сек. Скачано', i, 'из', file, 'Мб', z,'%')
  second += 1
else:
  print('Прошло', second, 'сек. Скачано', file, 'из', file, 'Мб', z_1,'%')

17) Конвертер валют 
# программа,которая получает на вход стоимость покупки в евро,затем выводит ответ в рублях.
# 
# Мы живём в альтернативной реальности,
# где 1 евро = 1.25 доллара, а 1 доллар = 60.87 рублей.

money = int(input('Стоимость покупки '))
one_eur = 1.25
one_green = 60.87
res = (money * one_eur)/one_green
print('в рублях',res)

18) Калькулятор
# программа, запрашивающую у пользователя число и действие, которое нужно сделать с числом: вывести сумму его цифр, максимальную или минимальную цифру. 
def calculator():
  number = int(input('Введите число '))
  print('Что сделать с числом?')
  z = 0
  z += int(input('1 -- Вывести сумму его цифр, 2 -- максимальная цифра, 3 -- минимальная цифра '))
  if z == 1:
    summ_num(number)
  if z == 2:
    max_num(number)
  if z == 3:
    min_num(number)
def summ_num(number):
    suma = 0
    while number > 0:
        digit = number % 10
        suma = suma + digit
        number = number // 10
    print("Сумма:", suma)
def max_num(number):
   max_digit = max(str(number))
   print("Максимальная цифра числа", number, ":", max_digit)
def min_num(number):
   min_digit = min(str(number))
   print("Минимальная цифра числа", number, ":", min_digit)  

calculator()

19) Число наоборот
# Вводится последовательность чисел,которая оканчивается нулём.
# Реализуйте функцию,которая принимает в качестве аргумента каждое число, переворачивает его и выводит на экран.

# Пример:
# Введите число: 1234
# Число наоборот: 4321
# Введите число: 1000
# Число наоборот: 0001
# Введите число: 0
# Программа завершена!

def reverse_number(number):
  number = f'{number}'
  reverse_n = ''
  for i in str(number):
    reverse_n = i + reverse_n
  print(f'Число наоборот:  {reverse_n}')

while True:
  n = int(input(f'Введите число '))
  if n != 0:
    reverse_number(n)
  else:
    print(f'Программа завершена!')
    break


